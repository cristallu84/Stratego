// Checks if the coordinates given are within the board
bool Grid::outBound(int r, int c) {
    if (r >= gridSize || c >= gridSize) {
        return false;
    }
    return true;
}


// Checks if the link exists
bool Grid::isLink(char c) {
    if (c >= 41 && c <= 48) {
        return true;
    } else if (c >= 61 && c <= 68) {
        return true;
    } else {
        return false;
    }
}

// Checks if the link is currently on the board
bool Grid::onBoard(char l) {
    try {
        Cell & c = this->findCell(l);
    } catch (const not_on_board& e) {
        return false;
    }
    return true;
}

bool Grid::link_in_player(char l, int p) {
    if (p == 1) {
        for (int i = 41; i <= 48; ++i) {
            if (l == i) {
                return true;
            }
        }
        return false; 
    } else {
        for (int i = 61; i <= 68; ++i) {
            if (l == i) {
                return true;
            }
        }
        return false;
    }
}

-------------------------------------------------------
void Grid::linkBoost(char c) {
    if (!(isLink(c))) { throw not_link(); }
    if (!(onBoard(c))) {throw not_on_board(); }
    if (!(link_in_player(c, this->getTurn()))) { throw not_your_link();}

    Linkboost lb(this->findCell(c).getLink());
    lb.execute();
}


void Grid::firewall(int r, int c) {
    if (!(outBound(r, c))) { throw out_bounds();}
    if (theGrid[r][c].getFireWall() != 'n') { throw already_exists(); }

    Firewall f(theGrid[r][c], this->getTurn());
    f.execute();
}


void Grid::download(char c) {
    if (!(isLink(c))) { throw not_link(); }

    if (this->getTurn() == 1) {
        Download d(this->findCell(c), player1, player2, 1);
        d.execute();
    } else {
        Download d (this->findCell(c), player1, player2, 2);
        d.execute();
    }
}


void Grid::polarize(char c) {
    if (!(isLink(c))) { throw not_link(); }

    Polarize p(this->findCell(c).getLink());
    p.execute();
}


void Grid::scan(char c) {
    if (!(isLink(c))) { throw not_link(); }
    if (!(onBoard(c))) {throw not_on_board(); }

    Scan s(this->findCell(c).getLink());
    s.execute();
}
